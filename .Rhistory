R.home()
install.packages('RMySQL',type='source')
Sys.getenv('MYSQL_HOME')
install.packages(“RMySQL”, type = “source”)
install.packages(“RMySQL”, type = “source”)
install.packages("RMySQL", type = "source")
install.packages("RMySQL", type = "source")
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github", "56b637a5baffac62cad9", "0de5e94eb38703b6c9300353e540d9c0433ad939")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
install.packages("httpuv")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
req <- GET("https://api.github.com/users/jtleek/repos", config(token = github_token))
req
req <- GET("https://api.github.com/users/jtleek/repos.json", config(token = github_token))
req
json1 = content(req)
install.packages("jsonlite")
json1 = content(req)
json2 = jsonlite::fromJSON(toJSON(json1))
json2 = jsonlite::fromJSON(toJSON(json1))
json1
myapp <- oauth_app("github", "60fc6442dbaee43bb22c", "0de5e94eb38703b6c9300353e540d9c0433ad939")
req <- GET("https://api.github.com/users/jtleek/repos.json", config(token = github_token))
req
myapp <- oauth_app("github", key = "60fc6442dbaee43bb22c", secret = "0de5e94eb38703b6c9300353e540d9c0433ad939")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
req <- GET("https://api.github.com/users/jtleek/repos.json", config(token = github_token))
req
json1 = content(req)
json1
json2 = jsonlite::fromJSON(toJSON(json1))
myapp <- oauth_app("Coursera", key = "60fc6442dbaee43bb22c", secret = "0de5e94eb38703b6c9300353e540d9c0433ad939")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
req <- GET("https://api.github.com/users/jtleek/repos.json", config(token = github_token))
json1 = content(req)
json1
myapp <- oauth_app("Coursera", key = "60fc6442dbaee43bb22c", secret = "0de5e94eb38703b6c9300353e540d9c0433ad939")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
req <- GET("https://api.github.com/users/jtleek/repos.json", config(token = github_token))
json1 = content(req)
json1
myapp <- oauth_app("Coursera", key = "60fc6442dbaee43bb22c", secret = "e4a7104c2225c01d7c5ddd6cada59dac1c3c1458")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
req <- GET("https://api.github.com/users/jtleek/repos", config(token = github_token))
json1 = content(req)
json1
json2 = jsonlite::fromJSON(toJSON(json1))
library(jsonlite)
json2 = jsonlite::fromJSON(toJSON(json1))
json2
str(json2)
head(json2)
names(json2)
json2[4, $created_at]
json2[4, "created_at"]
json2[4, c("full_name","created_at"]
json2[4, c("full_name","created_at")]
json2[4, c("name","created_at"]
json2[4, c("name","created_at")]
json2[which(json2$name == datasharing),c("name", "created_at")]
json2[which(json2$name == "datasharing"),c("name", "created_at")]
install.packages("sqldf")
library(sqldf)
acs <- read.csv("getdata_data_ss06pid.csv")
acs <- read.csv("~/Exploratory Data Analysis/data/getdata_data_ss06pid.csv")
acs <- read.csv("./Exploratory Data Analysis/data/getdata_data_ss06pid.csv")
str(acs)
sqldf("select pwgtp1 from acs where AGEP < 50")
sqldf("select distinct AGEP from acs")
sqldf("select distinct AGEP from acs order by AGEP")
con = url("http://biostat.jhsph.edu/~jleek/contact.html")
page = readlines(con)
page = readLines(con)
close(con)
page[10]
nchar(page[10])
nchar(page[20])
nchar(page[30])
nchar(page[100])
filename = "./Getting and Cleaning Data/data/getdata_wksst8110.for"
columns = c(8,13,13,13,10,13,13,13,13,10,13,13,13,13,10)
x <- read.fwf(filename, skip=1, columns)
head(x[,4])
columns = c(8,13,13,13,10)
x <- read.fwf(filename, skip=3, columns)
head(x[,4])
columns = c(13,13,13,13,10)
x <- read.fwf(filename, skip=3, columns)
head(x[,4])
columns = c(10,13,13,13,13)
x <- read.fwf(filename, skip=3, columns)
head(x[,4])
x <- read.fwf(filename, skip=4, columns)
head(x[,4])
x <- read.fwf(filename, skip=4, columns)
head(x[,4])
columns = c(10,13,13,13,13)
columns = c(10,9,4,9,4,9,4,9,4)
x <- read.fwf(filename, skip=4, columns)
head(x[,4])
sum(x[,4])
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
library(ggplot2)
install.packages("ggplot2")
library(ggplot2)
library(datasets)
data(airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies, smooth = "loess")
qplot(votes, rating, data = movies, panel = panel.loess)
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies, smooth = "loess")
qplot(votes, rating, data = movies, panel = panel.loess)
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies) + stats_smooth("loess")
qplot(votes, rating, data = movies, smooth = "loess")
qplot(votes, rating, data = movies, panel = panel.loess)
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies) + geom_smooth(method = "loess")
qplot(votes, rating, data = movies) + stat_smooth("loess")
setwd("D:/My Documents/John's Stuff/Coursera/Reproducible Research/RepData_PeerAssessment1")
# Reproducible Research: Peer Assessment 1
## Loading and preprocessing the data
```{r}
## Read the activity data, coverting the date column to the Date class.
columnClasses <- c("integer", "Date", "integer")
amData <- read.csv("./activity.csv", colClasses = columnClasses)
```
## What is total, mean, and median number of steps taken per day?
```{r}
library(ggplot2)
## Calculate the total number of steps per day.
amDataTotalByDate <- aggregate(steps ~ date, data = amData, FUN=sum)
## Create a "histogram", in this case a bar plot, of steps by day.
qplot(date, steps, data = amDataTotalByDate, geom = "bar", stat = "identity",
main = "Total Steps Per Day")
## Calculate the mean number of steps per day and plot.
amDataMeanByDate <- aggregate(steps ~ date, data = amData, FUN=mean)
qplot(date, steps, data = amDataMeanByDate, geom = "bar", stat = "identity",
main = "Mean Steps Per Day")
## Calculate the median number of steps per day and plot.
amDataMedianByDate <- aggregate(steps ~ date, data = amData, FUN=median, na.rm = TRUE)
qplot(date, steps, data = amDataMedianByDate, geom = "bar", stat = "identity",
main = "Median Steps Per Day")
```
## What is the average daily activity pattern?
```{r}
amDataMeanByInterval <- aggregate(steps ~ interval, data = amData, FUN=mean)
qplot(interval, steps, data = amDataMeanByInterval, geom="path", stat = "identity",
main = "Mean Steps Per Time Interval")
maxMeanByInterval <-
amDataMeanByInterval[amDataMeanByInterval$steps == max(amDataMeanByInterval$steps),
"interval"]
```
## Imputing missing values
## Are there differences in activity patterns between weekdays and weekends?
amDataNoMV <- amData
length(is.na(amData$steps))
length(is.na(amData$steps) == TRUE)
head(is.na(amData$steps))
is.na(amData[288:289, "steps"])
amData[is.na(amData[288:289, "steps"]),]
naRows <- amData[is.na(amData$steps),]
naRows[(naRows$date == "2012-10-01" & naRows$interval == 2355) | (naRows$date == "2012-10-02" & naRows$interval == 0),]
nrows(naRows)
nrow(naRows)
nrow(amData[is.na(amData$steps),])
amDataNoMV <- amData
amDataNoMV$steps[is.na(amDataNoMV$steps)] <- amDataMeanByInterval[amDataMeanByInterval$interval == amDataNoMV[is.na(amDataNoMV$steps), "interval"], "steps"]
View(amDataNoMV)
amDataNoMVTotalByDate <- aggregate(steps ~ date, data = amDataNoMV, FUN=sum)
qplot(date, steps, data = amDataNoMVTotalByDate, geom = "bar", stat = "identity",
main = "Total Steps Per Day (Missing Values Replaced")
qplot(date, steps, data = amDataNoMVTotalByDate, geom = "bar", stat = "identity",
main = "Total Steps Per Day (Missing Values Replaced)")
amDataNoMVMeanByDate <- aggregate(steps ~ date, data = amDataNoMV, FUN=mean)
qplot(date, steps, data = amDataNoMVMeanByDate, geom = "bar", stat = "identity",
main = "Mean Steps Per Day (Missing Values Replaced)")
amDataNoMVMedianByDate <- aggregate(steps ~ date, data = amDataNoMV, FUN=median, na.rm = TRUE)
qplot(date, steps, data = amDataNoMVMedianByDate, geom = "bar", stat = "identity",
main = "Median Steps Per Day (Missing Values Replaced)")
weekdays("2014-06-08")
weekdays(as.Date("2014-06-08"))
TypeOfDay <-
function(amDate) {
if(weekdays(amDate) %in% c("Saturday", "Sunday")) {
returnDay = "weekend"
{ else
returnDay = "weekday"
}
returnDay
}
TypeOfDay <-
function(amDate) {
if(weekdays(amDate) %in% c("Saturday", "Sunday")) {
returnDay = "weekend"
} else {
returnDay = "weekday"
}
returnDay
}
TypeOfDay(as.Date("2014-06-08"))
TypeOfDay(as.Date("2014-06-09"))
amDataNoMV$TypeOfDay <- TypeOfDay(amDataNoMV$date)
View(amDataNoMV)
amDataNoMV[,"TypeOfDay"] <- TypeOfDay(amDataNoMV[,"date"])
test <- TypeOfDay(amDataNoMV[,"date"])
head(test, 2000)
test <- tapply(amDataNoMV$date, FUN=TypeOfDay)
test <- sapply(amDataNoMV$date, FUN=TypeOfDay)
head(test, 2000)
amDataNoMV$TypeOfDay <- sapply(amDataNoMV$date, FUN = TypeOfDay)
amDataNoMV$TypeOfDay <- as.factor(amDataNoMV$TypeOfDay)
amDataNoMV$TypeOfDay <- as.factor(sapply(amDataNoMV$date, FUN = TypeOfDay))
View(amDataNoMV)
qplot(interval, steps, data = amDataNoMV, geom = "path", stat = "identity",
facets = .~TypeOfDay, Main = "Steps Per Interval")
View(amDataMeanByInterval)
amDataNoMVMeanByInterval <- aggregate(steps ~ interval + TypeOfDay, data = amDataNoMV, FUN=mean)
View(amDataNoMVMeanByInterval)
qplot(interval, steps, data = amDataNoMVMeanByInterval, geom = "path", stat = "identity",
facets = .~TypeOfDay, Main = "Steps Per Interval")
qplot(interval, steps, data = amDataNoMVMeanByInterval, geom = "path", stat = "identity",
facets = facet_wrap(.~TypeOfDay, nrow = 2, ncol =1), Main = "Steps Per Interval")
qplot(interval, steps, data = amDataNoMVMeanByInterval, geom = "path", stat = "identity",
facets = facet_wrap(~ TypeOfDay, nrow = 2, ncol =1), Main = "Steps Per Interval")
p <- qplot(interval, steps, data = amDataNoMVMeanByInterval, geom = "path", stat = "identity",
+       Main = "Steps Per Interval")
p <- qplot(interval, steps, data = amDataNoMVMeanByInterval, geom = "path", stat = "identity", Main = "Steps Per Interval")
p + facet_wrap(~ TypeOfDay, nrow = 2, ncol =1)
png(filename = "RR_Steps.png", width = 480, height = 480)
p + facet_wrap(~ TypeOfDay, nrow = 2, ncol =1)
dev.off()
# Reproducible Research: Peer Assessment 1
This assignment was completed by John Taylor for the Reproducible Research class.
## Loading and preprocessing the data
The activity monitoring data was taken from Dr. Peng's GitHub repository, [here](https://github.com/rdpeng/RepData_PeerAssessment1).
```{r}
## Read the activity data, coverting the date column to the Date class.
columnClasses <- c("integer", "Date", "integer")
amData <- read.csv("./activity.csv", colClasses = columnClasses)
```
## What is total, mean, and median number of steps taken per day?
The graphs below show the answers, but due to the large number of missing data elements, the results are often misleading. There are also a very large number of 0 entries, even for times of the day when subject would likely have taken steps. Perhaps they were not wearing the device?
```{r}
library(ggplot2)
## Calculate the total number of steps per day.
amDataTotalByDate <- aggregate(steps ~ date, data = amData, FUN=sum)
## Create a "histogram", in this case a bar plot, of steps by day.
qplot(date, steps, data = amDataTotalByDate, geom = "bar", stat = "identity",
main = "Total Steps Per Day")
## Calculate the mean number of steps per day and plot.
amDataMeanByDate <- aggregate(steps ~ date, data = amData, FUN=mean)
qplot(date, steps, data = amDataMeanByDate, geom = "bar", stat = "identity",
main = "Mean Steps Per Day")
## Calculate the median number of steps per day and plot.
amDataMedianByDate <- aggregate(steps ~ date, data = amData, FUN=median, na.rm = TRUE)
qplot(date, steps, data = amDataMedianByDate, geom = "bar", stat = "identity",
main = "Median Steps Per Day")
```
Note the at the median graph appears to show no answer. In fact the answer for every day is zero. This is an indicator of the large number of zero entries for many intervals.
## What is the average daily activity pattern?
```{r}
amDataMeanByInterval <- aggregate(steps ~ interval, data = amData, FUN=mean)
qplot(interval, steps, data = amDataMeanByInterval, geom="path", stat = "identity",
main = "Mean Steps Per Time Interval")
maxMeanByInterval <-
amDataMeanByInterval[amDataMeanByInterval$steps == max(amDataMeanByInterval$steps),
"interval"]
```
The maximum mean number of steps taken in any interval is `r maxMeanByInterval`.
## Imputing missing values
To provide a view of the data if the missing values were filled in representative ones, I have replaced all NAs in the data set with the average value for that interval taken across all days in the data set.
```{r}
## Determine the number of missing values in the data set.
numMissingValues <- nrow(amData[is.na(amData$steps),])
## Create a data set with no missing values.
```
There are `r numMissingValues` missing steps values in the data set.
The following graphs repeat the total, mean, and median graphs shown above, but with
the missing values in the data set replaced by averages.
```{r}
amDataNoMV <- amData
## Replace the NAs in the data set with the mean number of steps for that interval.
## This is accomplished below though the use of indexing and vector operations. On the
## left side of the assignment operator, all NA values in the new data set will be replaced.
## The values are  drawn from the Mean-by-Interval data set. The mean for each interval
## must be found for each NA-row of the new data set. Because of vector operations in R,
## the is.na function returns matching rows on both sides of the assignment operation, thus
## using the correct interval for each NA row. This matching interval is then used to
## look up the mean number of steps for that interval.
amDataNoMV$steps[is.na(amDataNoMV$steps)] <-
amDataMeanByInterval[amDataMeanByInterval$interval == amDataNoMV[is.na(amDataNoMV$steps),
"interval"],
"steps"]
## Re-do the first three graphs with the new data set.
amDataNoMVTotalByDate <- aggregate(steps ~ date, data = amDataNoMV, FUN=sum)
qplot(date, steps, data = amDataNoMVTotalByDate, geom = "bar", stat = "identity",
main = "Total Steps Per Day (Missing Values Replaced)")
amDataNoMVMeanByDate <- aggregate(steps ~ date, data = amDataNoMV, FUN=mean)
qplot(date, steps, data = amDataNoMVMeanByDate, geom = "bar", stat = "identity",
main = "Mean Steps Per Day (Missing Values Replaced)")
amDataNoMVMedianByDate <- aggregate(steps ~ date, data = amDataNoMV, FUN=median, na.rm = TRUE)
qplot(date, steps, data = amDataNoMVMedianByDate, geom = "bar", stat = "identity",
main = "Median Steps Per Day (Missing Values Replaced)")
```
## Are there differences in activity patterns between weekdays and weekends?
```{r}
## Create a function to determine whether the data is weekend or weekday
## and return the appropriate value.
TypeOfDay <-
function(amDate) {
if(weekdays(amDate) %in% c("Saturday", "Sunday")) {
returnDay = "weekend"
} else {
returnDay = "weekday"
}
returnDay
}
## Using the TypeOfDay function above, add a new column to the data set
## indicating what type day the date is. Create the new variable as a factor.
amDataNoMV$TypeOfDay <- as.factor(sapply(amDataNoMV$date, FUN = TypeOfDay))
## Find the mean of the number of steps by interval and type of day.
amDataNoMVMeanByInterval <- aggregate(steps ~ interval + TypeOfDay, data = amDataNoMV, FUN=mean)
## Plot the mean steps per interval using two graphs (facets), one each for weekend and weekday.
p <- qplot(interval, steps, data = amDataNoMVMeanByInterval, geom = "path", stat = "identity",
Main = "Steps Per Interval")
## To force the facet function to place the graphs one on top of the other use the facet_wrap
## funciton after creating the qplot.
p + facet_wrap(~ TypeOfDay, nrow = 2, ncol = 1)
```
View(amData)
amDataNoMV[amDataNoMV$date == as.Date("2012-11-14"), "steps"]
naVector <- is.na(amData$steps)
head(naVector, 1000)
amDataNoMV <- amData
fillData <-
function(amSteps, amInterval) {
if (is.na(amSteps)) {
returnSteps =
amDataMeanByInterval[amDataMeanByInterval$interval == amInterval, "steps"]
} else {
returnSteps = amSteps
}
returnSteps
}
amDataNoMV$steps <- sapply(amDataNoMV$steps, FUN = fillData, amDataNoMV$interval)
amDataNoMV[amDataNoMV$date == as.Date("2012-11-14"), "steps"]
View(amDataNoMV)
tv <- c(1,2,3)
tv
c(tv, 4)
tv <- c(tv, 4)
tv
nrow(amDataNoMV)
tv2 <- c(tv2, 1)
vector(tv2)
as.vector(tv2)
tv2 <- vector()
tv2 <- c(tv2, 1)
tv2
amDataNoMV <- amData
newStepsVector <- vector()
for (rowNum in nrow(amDataNoMV)) {
if (is.na(amDataNoMV[rowNum, "steps"]) {
newStepsVector <- c(newStepsVector,
amDataMeanByInterval[amDataMeanByInterval$interval == amDataNoMV[rowNum, "interval"],
"steps"])
} else {
newStepsVector <- c(newStepsVector, amDataNoMV[rowNum, "steps"])
}
}
for (rowNum in nrow(amDataNoMV)) {
if (is.na(amDataNoMV[rowNum, "steps"])) {
newStepsVector <- c(newStepsVector,
amDataMeanByInterval[amDataMeanByInterval$interval == amDataNoMV[rowNum, "interval"],
"steps"])
} else {
newStepsVector <- c(newStepsVector, amDataNoMV[rowNum, "steps"])
}
}
amDataNoMV$steps <- newStepsVector
amDataNoMV[amDataNoMV$date == as.Date("2012-11-14"), "steps"]
amDataMeanByInterval[amDataMeanByInterval$interval == 100], "steps"]
amDataMeanByInterval[amDataMeanByInterval$interval == 100, "steps"]
amDataNoMV[10, "interval"]
amDataNoMV <- amData
newStepsVector <- vector()
for (rowNum in 1:nrow(amDataNoMV)) {
if (is.na(amDataNoMV[rowNum, "steps"])) {
newStepsVector <- c(newStepsVector,
amDataMeanByInterval[amDataMeanByInterval$interval == amDataNoMV[rowNum, "interval"],
"steps"])
} else {
newStepsVector <- c(newStepsVector, amDataNoMV[rowNum, "steps"])
}
}
amDataNoMV$steps <- newStepsVector
amDataNoMV[amDataNoMV$date == as.Date("2012-11-14"), "steps"]
# Reproducible Research: Peer Assessment 1
This assignment was completed by John Taylor for the Reproducible Research class.
## Loading and preprocessing the data
The activity monitoring data was taken from Dr. Peng's GitHub repository, [here](https://github.com/rdpeng/RepData_PeerAssessment1).
```{r}
## Read the activity data, coverting the date column to the Date class.
columnClasses <- c("integer", "Date", "integer")
amData <- read.csv("./activity.csv", colClasses = columnClasses)
```
## What is total, mean, and median number of steps taken per day?
The graphs below show the answers, but due to the large number of missing data elements, the results are often misleading. There are also a very large number of 0 entries, even for times of the day when subject would likely have taken steps. Perhaps they were not wearing the device?
```{r}
library(ggplot2)
## Calculate the total number of steps per day.
amDataTotalByDate <- aggregate(steps ~ date, data = amData, FUN=sum)
## Create a "histogram", in this case a bar plot, of steps by day.
qplot(date, steps, data = amDataTotalByDate, geom = "bar", stat = "identity",
main = "Total Steps Per Day")
## Calculate the mean number of steps per day and plot.
amDataMeanByDate <- aggregate(steps ~ date, data = amData, FUN=mean)
qplot(date, steps, data = amDataMeanByDate, geom = "bar", stat = "identity",
main = "Mean Steps Per Day")
## Calculate the median number of steps per day and plot.
amDataMedianByDate <- aggregate(steps ~ date, data = amData, FUN=median, na.rm = TRUE)
qplot(date, steps, data = amDataMedianByDate, geom = "bar", stat = "identity",
main = "Median Steps Per Day")
```
Note the at the median graph appears to show no answer. In fact the answer for every day is zero. This is an indicator of the large number of zero entries for many intervals.
## What is the average daily activity pattern?
```{r}
amDataMeanByInterval <- aggregate(steps ~ interval, data = amData, FUN=mean)
qplot(interval, steps, data = amDataMeanByInterval, geom="path", stat = "identity",
main = "Mean Steps Per Time Interval")
maxMeanByInterval <-
amDataMeanByInterval[amDataMeanByInterval$steps == max(amDataMeanByInterval$steps),
"interval"]
```
The maximum mean number of steps taken in any interval is `r maxMeanByInterval`.
## Imputing missing values
To provide a view of the data if the missing values were filled in representative ones, I have replaced all NAs in the data set with the average value for that interval taken across all days in the data set.
```{r}
## Determine the number of missing values in the data set.
numMissingValues <- nrow(amData[is.na(amData$steps),])
## Create a data set with no missing values.
```
There are `r numMissingValues` missing steps values in the data set.
The following graphs repeat the total, mean, and median graphs shown above, but with
the missing values in the data set replaced by averages.
```{r}
amDataNoMV <- amData
## Replace the NAs in the data set with the mean number of steps for that interval.
## This is accomplished below by looping through the data set. While this technique
## doesn't make use of cool R functions, it took MUCH less time to write than trying
## to get a version of indexing and vector operations, or one of the apply functions to
## work.
newStepsVector <- vector()
for (rowNum in 1:nrow(amDataNoMV)) {
if (is.na(amDataNoMV[rowNum, "steps"])) {
newStepsVector <- c(newStepsVector,
amDataMeanByInterval[amDataMeanByInterval$interval == amDataNoMV[rowNum, "interval"],
"steps"])
} else {
newStepsVector <- c(newStepsVector, amDataNoMV[rowNum, "steps"])
}
}
amDataNoMV$steps <- newStepsVector
## Re-do the first three graphs with the new data set.
amDataNoMVTotalByDate <- aggregate(steps ~ date, data = amDataNoMV, FUN=sum)
qplot(date, steps, data = amDataNoMVTotalByDate, geom = "bar", stat = "identity",
main = "Total Steps Per Day (Missing Values Replaced)")
amDataNoMVMeanByDate <- aggregate(steps ~ date, data = amDataNoMV, FUN=mean)
qplot(date, steps, data = amDataNoMVMeanByDate, geom = "bar", stat = "identity",
main = "Mean Steps Per Day (Missing Values Replaced)")
amDataNoMVMedianByDate <- aggregate(steps ~ date, data = amDataNoMV, FUN=median, na.rm = TRUE)
qplot(date, steps, data = amDataNoMVMedianByDate, geom = "bar", stat = "identity",
main = "Median Steps Per Day (Missing Values Replaced)")
```
## Are there differences in activity patterns between weekdays and weekends?
```{r}
## Create a function to determine whether the data is weekend or weekday
## and return the appropriate value.
TypeOfDay <-
function(amDate) {
if(weekdays(amDate) %in% c("Saturday", "Sunday")) {
returnDay = "weekend"
} else {
returnDay = "weekday"
}
returnDay
}
## Using the TypeOfDay function above, add a new column to the data set
## indicating what type day the date is. Create the new variable as a factor.
amDataNoMV$TypeOfDay <- as.factor(sapply(amDataNoMV$date, FUN = TypeOfDay))
## Find the mean of the number of steps by interval and type of day.
amDataNoMVMeanByInterval <- aggregate(steps ~ interval + TypeOfDay, data = amDataNoMV, FUN=mean)
## Plot the mean steps per interval using two graphs (facets), one each for weekend and weekday.
p <- qplot(interval, steps, data = amDataNoMVMeanByInterval, geom = "path", stat = "identity",
Main = "Steps Per Interval")
## To force the facet function to place the graphs one on top of the other use the facet_wrap
## funciton after creating the qplot.
p + facet_wrap(~ TypeOfDay, nrow = 2, ncol = 1)
```
